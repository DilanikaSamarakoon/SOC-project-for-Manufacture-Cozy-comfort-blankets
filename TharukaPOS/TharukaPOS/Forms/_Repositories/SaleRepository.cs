using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data;
using System.Data.SqlClient;
using TharukaPOS.Forms.Models;


namespace TharukaPOS.Forms._Repositories
{
    public class SaleRepository : ISaleRepository
    {
        private readonly string connectionString;
        private readonly IProductRepository productRepository;

        public SaleRepository(string connectionString)
        {
            this.connectionString = connectionString;
            this.productRepository = new ProductRepository(connectionString);
        }

        public void SaveSale(SaleModel sale)
        {
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();
                SqlTransaction transaction = connection.BeginTransaction(); // Start transaction

                try
                {
                    // --- Pre-check Stock Availability (Recommended) ---
                    // This is done before any database writes for the current transaction
                    foreach (SaleDetailModel detail in sale.SaleDetails)
                    {
                        int currentStock = productRepository.GetStock(detail.ProductId);
                        if (currentStock < detail.Quantity)
                        {
                            // If stock is insufficient for any item, throw an exception
                            throw new InvalidOperationException($"Insufficient stock for product '{detail.ProductName}'. Available: {currentStock}, Required: {detail.Quantity}");
                        }
                    }

                    // 1. Insert into Sales table (Header)
                    string insertSaleQuery = @"INSERT INTO Sales (DealerId, SaleDate, TotalAmount)
                                               VALUES (@DealerId, @SaleDate, @TotalAmount);
                                               SELECT SCOPE_IDENTITY();"; // Get the newly generated SaleId

                    using (SqlCommand command = new SqlCommand(insertSaleQuery, connection, transaction))
                    {
                        command.Parameters.Add("@DealerId", SqlDbType.Int).Value = sale.DealerId;
                        command.Parameters.Add("@SaleDate", SqlDbType.DateTime).Value = sale.SaleDate;
                        command.Parameters.Add("@TotalAmount", SqlDbType.Decimal).Value = sale.TotalAmount;

                        // Retrieve the SaleId generated by the database
                        sale.SaleId = Convert.ToInt32(command.ExecuteScalar());
                    }

                    // 2. Insert into SaleDetails table (Line Items) AND Update Product Stock
                    string insertSaleDetailQuery = @"INSERT INTO SaleDetails (SaleId, ProductId, Quantity, SellingPrice, BuyingPriceAtSale, LineTotal)
                                                     VALUES (@SaleId, @ProductId, @Quantity, @SellingPrice, @BuyingPriceAtSale, @LineTotal);";

                    foreach (SaleDetailModel detail in sale.SaleDetails)
                    {
                        using (SqlCommand command = new SqlCommand(insertSaleDetailQuery, connection, transaction))
                        {
                            command.Parameters.Add("@SaleId", SqlDbType.Int).Value = sale.SaleId;
                            command.Parameters.Add("@ProductId", SqlDbType.Int).Value = detail.ProductId;
                            command.Parameters.Add("@Quantity", SqlDbType.Int).Value = detail.Quantity;
                            command.Parameters.Add("@SellingPrice", SqlDbType.Decimal).Value = detail.SellingPrice;
                            command.Parameters.Add("@BuyingPriceAtSale", SqlDbType.Decimal).Value = detail.BuyingPriceAtSale;
                            command.Parameters.Add("@LineTotal", SqlDbType.Decimal).Value = detail.LineTotal;
                            command.ExecuteNonQuery();
                        }

                        // NEW: Update product quantity in the Products table
                        // Pass a negative quantity because it's a decrease
                        bool stockUpdated = productRepository.UpdateStock(detail.ProductId, -detail.Quantity);
                        if (!stockUpdated)
                        {
                            // This scenario should ideally be caught by the pre-check,
                            // but it's a safeguard against concurrent sales.
                            // If updateStock returns false, it means the quantity went below zero or product not found.
                            throw new InvalidOperationException($"Failed to update stock for product ID {detail.ProductId}. It might have gone below zero during transaction.");
                        }
                    }

                    transaction.Commit(); // Commit the transaction if all inserts and updates are successful
                }
                catch (Exception ex)
                {
                    transaction.Rollback(); // Rollback on error
                    // Re-throw the exception to allow SalesForm to catch and display the error
                    throw new Exception("Error saving sale and updating product stock: " + ex.Message, ex);
                }
            }
        }


        // Helper to read SaleDetail from SqlDataReader, including ProductName
        private SaleDetailModel ReadSaleDetail(SqlDataReader reader)
        {
            return new SaleDetailModel
            {
                SaleDetailId = Convert.ToInt32(reader["SaleDetailId"]),
                SaleId = Convert.ToInt32(reader["SaleId"]),
                ProductId = Convert.ToInt32(reader["ProductId"]),
                ProductName = reader["ProductName"].ToString(), // Assuming ProductName comes from JOIN
                Quantity = Convert.ToInt32(reader["Quantity"]),
                SellingPrice = Convert.ToDecimal(reader["SellingPrice"]),
                BuyingPriceAtSale = Convert.ToDecimal(reader["BuyingPriceAtSale"]),
                LineTotal = Convert.ToDecimal(reader["LineTotal"])
            };
        }

        // New method: Get SaleDetails for a specific dealer on a specific date
        public IEnumerable<SaleDetailModel> GetSaleDetailsByDealerAndDate(int dealerId, DateTime saleDate)
        {
            List<SaleDetailModel> saleDetails = new List<SaleDetailModel>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                string query = @"
                    SELECT
                        sd.SaleDetailId, sd.SaleId, sd.ProductId, p.product_name AS ProductName,
                        sd.Quantity, sd.SellingPrice, sd.BuyingPriceAtSale, sd.LineTotal
                    FROM SaleDetails sd
                    INNER JOIN Sales s ON sd.SaleId = s.SaleId
                    INNER JOIN Products p ON sd.ProductId = p.product_id
                    INNER JOIN Dealer d ON s.DealerId = d.DealerId
                    WHERE s.DealerId = @DealerId AND CAST(s.SaleDate AS DATE) = CAST(@SaleDate AS DATE)
                    ORDER BY sd.SaleDetailId ASC"; // Order by detail ID or product name

                using (SqlCommand command = new SqlCommand(query, connection))
                {
                    command.Parameters.Add("@DealerId", SqlDbType.Int).Value = dealerId;
                    command.Parameters.Add("@SaleDate", SqlDbType.Date).Value = saleDate.Date; // Compare only date part

                    connection.Open();
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            saleDetails.Add(ReadSaleDetail(reader));
                        }
                    }
                }
            }
            return saleDetails;
        }

        // Helper to read Dealer from SqlDataReader (re-use if you have a separate DealerRepository)
        private DealerModel ReadDealer(SqlDataReader reader)
        {
            return new DealerModel
            {
                DealerId = Convert.ToInt32(reader["DealerId"]),
                DealerName = reader["DealerName"].ToString(),
                DealerAddress = reader["DealerAddress"].ToString(), // Add if available
                DealerPhone = reader["DealerPhone"].ToString() // Add if available
            };
        }

        // New method: Get Dealers who made sales on a specific date (and can be searched)
        public IEnumerable<DealerModel> GetDealersBySaleDate(DateTime saleDate, string searchName = null)
        {
            List<DealerModel> dealers = new List<DealerModel>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                string query = @"
                    SELECT DISTINCT d.DealerId, d.DealerName, d.DealerAddress, d.DealerPhone
                    FROM Dealer d
                    INNER JOIN Sales s ON d.DealerId = s.DealerId
                    WHERE CAST(s.SaleDate AS DATE) = CAST(@SaleDate AS DATE)";

                if (!string.IsNullOrWhiteSpace(searchName))
                {
                    query += " AND d.DealerName LIKE @SearchName";
                }
                query += " ORDER BY d.DealerName ASC";

                using (SqlCommand command = new SqlCommand(query, connection))
                {
                    command.Parameters.Add("@SaleDate", SqlDbType.Date).Value = saleDate.Date;
                    if (!string.IsNullOrWhiteSpace(searchName))
                    {
                        command.Parameters.Add("@SearchName", SqlDbType.NVarChar).Value = "%" + searchName + "%";
                    }

                    connection.Open();
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            dealers.Add(ReadDealer(reader));
                        }
                    }
                }
            }
            return dealers;
        }

        public IEnumerable<DealerSalesHistoryReportModel> GetDealerSalesHistory(int? dealerId, DateTime startDate, DateTime endDate)
        {
            List<DealerSalesHistoryReportModel> history = new List<DealerSalesHistoryReportModel>();

            // SQL Query to join Sales, SaleDetails, Products, and Dealer tables
            // Columns now match your exact provided schemas
            string sql = @"
                SELECT
                    S.SaleId,
                    S.SaleDate,
                    ISNULL(D.DealerName, 'Direct Sale') AS DealerName,
                    P.product_name AS ProductName,
                    SD.Quantity AS QuantitySold,
                    SD.SellingPrice AS SellingPriceAtSale, -- Matched to your schema
                    SD.BuyingPriceAtSale,                   -- Matched to your schema
                    SD.LineTotal,
                    S.TotalAmount AS SaleTotalAmount        -- Matched to your schema
                FROM
                    [THARUKAPOS].[dbo].[Sales] AS S
                INNER JOIN
                    [THARUKAPOS].[dbo].[SaleDetails] AS SD ON S.SaleId = SD.SaleId
                INNER JOIN
                    [THARUKAPOS].[dbo].[Products] AS P ON SD.ProductId = P.product_id
                LEFT JOIN
                    [THARUKAPOS].[dbo].[Dealer] AS D ON S.DealerId = D.DealerId
                WHERE
                    S.SaleDate BETWEEN @StartDate AND @EndDate";

            if (dealerId.HasValue)
            {
                sql += " AND S.DealerId = @DealerId";
            }

            sql += " ORDER BY S.SaleDate DESC, S.SaleId DESC, P.product_name ASC;";

            using (SqlConnection connection = new SqlConnection(connectionString))
            using (SqlCommand command = new SqlCommand(sql, connection))
            {
                command.Parameters.Add("@StartDate", SqlDbType.DateTime).Value = startDate.Date;
                command.Parameters.Add("@EndDate", SqlDbType.DateTime).Value = endDate.Date.AddDays(1).AddSeconds(-1); // To include the whole end day

                if (dealerId.HasValue)
                {
                    command.Parameters.Add("@DealerId", SqlDbType.Int).Value = dealerId.Value;
                }

                connection.Open();
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        history.Add(new DealerSalesHistoryReportModel
                        {
                            SaleId = Convert.ToInt32(reader["SaleId"]),
                            SaleDate = Convert.ToDateTime(reader["SaleDate"]),
                            DealerName = reader["DealerName"].ToString(),
                            ProductName = reader["ProductName"].ToString(),
                            QuantitySold = Convert.ToInt32(reader["QuantitySold"]),
                            SellingPriceAtSale = Convert.ToDecimal(reader["SellingPriceAtSale"]), // Matched
                            BuyingPriceAtSale = Convert.ToDecimal(reader["BuyingPriceAtSale"]),   // Matched
                            LineTotal = Convert.ToDecimal(reader["LineTotal"]),
                            SaleTotalAmount = Convert.ToDecimal(reader["SaleTotalAmount"])        // Matched
                            // Removed: SaleDiscount
                        });
                    }
                }
            }
            return history;
        }
    }
}
