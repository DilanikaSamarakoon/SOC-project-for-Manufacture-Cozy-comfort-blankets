// This code goes in your API Project, inside the OrdersController.cs file.

using AutoMapper;
using CozyComfort.Manufacturer.API.Data;
using CozyComfort.Manufacturer.API.Models;
using CozyComfort.Manufacturer.API.DTO;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq; // Added for FirstOrDefaultAsync
using System.Threading.Tasks;

// Using a primary constructor for a more concise syntax
[ApiController]
[Route("api/[controller]")]
public class OrdersController(ApplicationDbContext context, IMapper mapper) : ControllerBase
{
    private readonly ApplicationDbContext _context = context;
    private readonly IMapper _mapper = mapper;

    [HttpGet]
    public async Task<ActionResult<IEnumerable<Order>>> GetOrders()
    {
        return await _context.Orders.ToListAsync();
    }

    [HttpPost]
    public async Task<ActionResult<Order>> CreateOrder([FromBody] OrderCreateDto orderDto)
    {
        // Create a new Order object from the DTO
        var order = _mapper.Map<Order>(orderDto); // Using AutoMapper is great here

        // Set server-side properties
        order.Status = "Pending";
        order.OrderDate = DateTime.UtcNow;

        // --- DO NOT SET THE OrderId HERE ---
        // The database will assign it automatically.

        var stockItem = await _context.Stocks // Assuming 'Stocks' is the correct DbSet
            .FirstOrDefaultAsync(s => s.BlanketId == order.BlanketId);

        if (stockItem == null || stockItem.Quantity < order.Quantity)
        {
            order.Status = "Pending-OutOfStock";
        }
        else
        {
            stockItem.Quantity -= order.Quantity;
        }

        _context.Orders.Add(order);
        await _context.SaveChangesAsync(); // This is where the database will generate the new ID

        // After SaveChangesAsync, the 'order' object is automatically updated 
        // with the new ID generated by the database.
        // This return statement will now work correctly.
        return CreatedAtAction(nameof(GetOrder), new { id = order.OrderId }, order);
    }

    // It is good practice to have a corresponding GetOrder by ID method
    [HttpGet("{id}")]
    public async Task<ActionResult<Order>> GetOrder(int id)
    {
        var order = await _context.Orders.FindAsync(id);
        if (order == null)
        {
            return NotFound();
        }
        return order;
    }
}
